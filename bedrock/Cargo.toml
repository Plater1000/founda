[package]
name = "bedrock"
description = "A Rust service foundation framework."
version = { workspace = true }
edition = { workspace = true }
publish = { workspace = true }
repository = { workspace = true }

[package.metadata.release]
# run in the context of workspace root
pre-release-hook = [
  "git-cliff",
  "-w", "..",
  "-o", "../RELEASE_NOTES.md",
  "--tag", "{{version}}"
]

[features]
# Default set of features.
default = [
    "platform-common-default", 
    "security"
]

# All non platform-specific features
platform-common-default = [
    "metrics",
    "settings",
    "jemalloc",
    "telemetry",
    "testing",
]

# Enables metrics functionality.
metrics = [
    "dep:bedrock-macros",
    "dep:erased-serde",
    "dep:once_cell",
    "dep:parking_lot",
    "dep:prometheus-client",
    "dep:prometheus",
    "dep:prometools",
    "dep:serde_with",
    "dep:serde",
]

# Enables serializable documented settings functionality.
settings = [
    "dep:bedrock-macros", 
    "dep:serde_path_to_error",
    "dep:serde_yaml",
    "dep:serde", 
    "dep:yaml-merge-keys",
]

# Enables all the telemetry-related features ("logging", "metrics", "tracing", "telemetry-server").
telemetry = [
    "logging",
    "memory-profiling",
    "metrics",
    "tracing",
    "telemetry-server",
]

# Enables the telemetry server.
telemetry-server = [
    "dep:futures-util",
    "dep:hyper",
    "dep:routerify",
    "dep:socket2",
]

# Enables logging functionality.
logging = [
    "dep:once_cell",
    "dep:parking_lot",
    "dep:slog-async",
    "dep:slog-json",
    "dep:slog-term",
    "dep:slog", 
    "dep:thread_local",
]

# Enables distributed tracing functionality.
tracing = [
    "dep:bedrock-macros",
    "dep:crossbeam-channel",
    "dep:once_cell",
    "dep:parking_lot",
    "dep:rand",
    "dep:rustracing_jaeger",
    "dep:rustracing",
    "dep:thread_local",
]

# Enables memory profiling features (require `jemalloc` feature to be enabled)
memory-profiling = [
    "dep:once_cell",
    "dep:tikv-jemalloc-ctl",
    "dep:tempfile",
    "dep:tokio"
]

# Enables security-related features
security = [
    "dep:bindgen",
    "dep:cc",
    "dep:once_cell"
]

# Enables jemalloc as a memory allocator
jemalloc = [
    "dep:tikv-jemallocator"
]

# Enables testing-related functionality.
testing = [
    "dep:bedrock-macros"
]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[dependencies]
anyhow = { workspace = true }
bedrock-macros = { workspace = true, optional = true }
crossbeam-channel = { workspace = true, optional = true }
erased-serde = { workspace = true, optional = true }
futures-util = { workspace = true, optional = true }
hyper = { workspace = true, optional = true }
parking_lot = { workspace = true, optional = true }
prometheus = { workspace = true, optional = true }
prometheus-client = { workspace = true, optional = true }
prometools = { workspace = true, optional = true }
routerify = { workspace = true, optional = true }
once_cell = { workspace = true, optional = true }
rand = { workspace = true, optional = true }
rustracing = { workspace = true, optional = true }
rustracing_jaeger = { workspace = true, optional = true }
serde = { workspace = true, optional = true }
serde_path_to_error = { workspace = true, optional = true }
serde_yaml = { workspace = true, optional = true }
serde_with = { workspace = true, optional = true }
slog = { workspace = true, optional = true }
slog-async = { workspace = true, optional = true }
slog-json = { workspace = true, optional = true }
slog-term = { workspace = true, optional = true }
socket2 = { workspace = true, optional = true }
thread_local = { workspace = true, optional = true }
tokio = { workspace = true, optional = true }
tikv-jemallocator = { workspace = true, optional = true }
yaml-merge-keys = { workspace = true, optional = true }

[target.'cfg(target_os = "linux")'.dependencies]
tikv-jemalloc-ctl = { workspace = true, optional = true }
tempfile = { workspace = true, optional = true }

[dev-dependencies]
rusty-hook = { workspace = true }
tokio = { workspace = true }

[target.'cfg(all(target_os = "linux", any(target_arch = "x86_64", target_arch = "aarch64")))'.build-dependencies]
bindgen = { workspace = true, optional = true }
cc = { workspace = true, optional = true }

